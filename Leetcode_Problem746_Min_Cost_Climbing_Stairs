int minCostClimbingStairs(int* cost, int costSize) {
    int dp[costSize + 1];
    dp[0] = 0;
    dp[1] = 0;
    for (int i = 2; i <= costSize; i++)
        dp[i] = fmin((dp[i - 1] + cost[i - 1]),(dp[i - 2] + cost[i - 2]));
    return dp[costSize];
}



---------------------------------------------------------------------------------------------------------------------------------------------------------



int minCostClimbingStairs(int* cost, int costSize) {
    int dp[costSize + 1];
    dp[0] = cost[0];
    dp[1] = cost[1];
    for(int i = 2; i < costSize; i++) // Calculate the minimum cost for each stair starting from the third stair
        dp[i] = fmin(dp[i - 1], dp[i - 2]) + cost[i];
    return fmin(dp[costSize - 1], dp[costSize - 2]);  // Return the minimum cost to reach the top (n-1) or the stair before it (n-2)
}



---------------------------------------------------------------------------------------------------------------------------------------------------------


int minCostClimbingStairs(int* cost, int costSize) {
    int prev1 = 0, prev2 = 0;
    for (int i = 2; i <= costSize; i++) 
    {
        int currentCost = fmin(prev1 + cost[i - 1], prev2 + cost[i - 2]);
        prev2 = prev1;
        prev1 = currentCost;
    }
    return prev1;
}
